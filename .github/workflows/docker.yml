name: Build Binaries + Docker

on:
  release:
    types: [ published ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-linux-binaries:
    name: Build Linux Binaries
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            build-tool: cargo
          - target: aarch64-unknown-linux-gnu
            build-tool: cross
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/setup-cross-toolchain-action@v1
        if: ${{ matrix.build-tool == 'cross' }}
        with:
          target: ${{ matrix.target }}
      - name: Build
        run: |
          if [ "${{ matrix.build-tool }}" = "cross" ]; then
            cargo install cross --locked
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
      - name: Package
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/musrv dist/musrv-${{ matrix.target }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: musrv-${{ matrix.target }}
          path: dist/musrv-${{ matrix.target }}

  build-macos-binary:
    name: Build macOS ARM Binary
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      - name: Build
        run: cargo build --release --target aarch64-apple-darwin
      - name: Package
        run: |
          mkdir -p dist
          cp target/aarch64-apple-darwin/release/musrv dist/musrv-aarch64-apple-darwin
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: musrv-aarch64-apple-darwin
          path: dist/musrv-aarch64-apple-darwin

  docker:
    needs: [build-linux-binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            target: x86_64-unknown-linux-gnu
            platform: linux/amd64
          - arch: arm64
            target: aarch64-unknown-linux-gnu
            platform: linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: musrv-${{ matrix.target }}
          path: dist
      - name: Prepare binary
        run: |
          mv dist/musrv-${{ matrix.target }} dist/musrv
          chmod +x dist/musrv
      - name: Copy Dockerfile into context
        run: cp Dockerfile dist/Dockerfile

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: dist
          build-args: |
            MUSRV_BIN=musrv
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ghcr.io/smoqadam/musrv:${{ github.event.release.tag_name }}-${{ matrix.arch }}
            ghcr.io/smoqadam/musrv:latest-${{ matrix.arch }}

  release-assets:
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [build-linux-binaries, build-macos-binary]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: List downloaded artifacts
        run: |
          ls -laR release

      - name: Package archives
        run: |
          set -euo pipefail
          cd release
          # Expect files named musrv-<target>
          for f in musrv-*; do
            case "$f" in
              musrv-x86_64-unknown-linux-gnu|musrv-aarch64-unknown-linux-gnu|musrv-aarch64-apple-darwin)
                tar -czf "$f.tar.gz" -C . "$f" ;;
              *) echo "Skipping unexpected file $f" ;;
            esac
          done
          ls -la

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.release.tag_name }}
          name: ${{ github.event.release.tag_name }}
          generate_release_notes: true
          files: |
            release/musrv-x86_64-unknown-linux-gnu.tar.gz
            release/musrv-aarch64-unknown-linux-gnu.tar.gz
            release/musrv-aarch64-apple-darwin.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
